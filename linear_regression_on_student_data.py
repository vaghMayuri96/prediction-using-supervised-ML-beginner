# -*- coding: utf-8 -*-
"""Linear_Regression_on_student data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dcqid-94vyYFd9QtNAc4vR1_saToniQN

# **Mayuri Jitendrabhai Vagh**

# The Sparks Foundation

# Task 1: Predict the Percentage of student based on the number of study hours and Second What will be the predict score if student studies for 9.25hrs/day.
"""





"""**Import Libraries**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn import metrics

"""## **Importing Database**"""

data_frame = pd.read_csv("https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv")

"""**Print Head of the data means top 5 data**"""

data_frame.head()

"""**Check If there any data null**"""

data_frame.isnull()

data_frame.info()

"""**list of columns**"""

print(list(data_frame.columns))

"""**Define X and Y for model**"""

X = data_frame["Hours"].values.reshape(-1,1)
Y = data_frame["Scores"].values.reshape(-1,1)

"""**Simple Visualising the data**"""

plt.scatter( X , Y , color = "#1f77b4" )
plt.xlabel("Hours")
plt.ylabel("Scores")
plt.title("Hours per Vs Scores per")
plt.grid()
plt.show()

"""**Slpting data for model the data**"""

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=0)

"""**Create linear Regression**"""

Linear_Regression = LinearRegression()

"""**Fit the X and Y value in linear regression**"""

Linear_Regression.fit(x_train,y_train)

coefficients = Linear_Regression.coef_ * X + Linear_Regression.intercept_

coefficients

"""**Visualising Train Data**"""

plt.scatter(x_train , y_train , color = "#128cb9")
plt.plot(X , coefficients , color = "green")
plt.show()

"""**Predictions**"""

Y_pred = Linear_Regression.predict(x_test)
Y_pred

"""**Test Data**"""

plt.scatter(x_test,y_test , color = "#128cb9")
plt.plot(x_test,Y_pred , color = "black")
plt.show()

"""**Data Frame with Actul score and prediceted score**"""

data_frame_predict = pd.DataFrame({"Hours": x_test.reshape(1,-1)[0] , "Score" : y_test.reshape(1,-1)[0] , "Predicted Score" : Y_pred.reshape(1,-1)[0]})
data_frame_predict

"""**Sorted data predict and score**"""

data_frame_sorted = data_frame_predict.sort_values(by = "Hours")
data_frame_sorted

"""**Actual Values Vs Predicted Values**"""

title = "Actual Values Vs Predicted Values"
ax1 = sns.distplot(data_frame_sorted["Score"], hist = False , color = "maroon" , label = "Score")
sns.distplot(data_frame_sorted["Predicted Score"] , hist = False , color = "blue" , label = "Predicted Score" , ax = ax1)
plt.legend()
plt.grid()
plt.title(title)
plt.show()

"""**Evaluating the model**
The final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics.
"""

mean_absolute_error=metrics.mean_absolute_error(y_test,Y_pred)
print('Mean absolute error:',mean_absolute_error)

corr=r2_score(y_train,lr.predict(x_train))
print('correlation:',corr)

acc=r2_score(y_test,Y_pred)
print('Accuracy:',acc)

"""**Predictions**"""

hrs = 9.25
pred = Linear_Regression.predict([[9.25]])
print("The predicted score if a student studies for 9.25 hrs/ day is",pred[0])